// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Category {
  id          String    @id @default(cuid())
  name        String
  description String
  products    Product[]
}

model Supplier {
  id          String    @id @default(cuid())
  name        String
  contactInfo String
  products    Product[]
}

model Product {
  id              String       @id @default(cuid())
  name            String
  unitType        String?
  currentQuantity Int
  idealQuantity   Int
  purchasePrice   Int?
  manufactureDate DateTime
  categoryId      String
  supplierId      String
  publicId        String?
  category        Category     @relation(fields: [categoryId], references: [id])
  supplier        Supplier     @relation(fields: [supplierId], references: [id])
  userActions     UserAction[]
}

model UserAction {
  id             String   @id @default(cuid())
  actionType     String
  details        String
  quantityChange Int
  created_at     DateTime @default(now())
  userId         String
  productId      String
  user           User     @relation(fields: [userId], references: [id])
  product        Product  @relation(fields: [productId], references: [id])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String       @id @default(cuid())
  name          String?
  email         String?      @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  userActions   UserAction[]
  isAdmin       Boolean      @default(false)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
